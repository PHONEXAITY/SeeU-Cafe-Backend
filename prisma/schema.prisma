generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role model
model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  users       UserRole[]
}

// User-Role relationship model
model UserRole {
  user_id     Int
  role_id     Int
  assigned_at DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role        Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
}

// User model
model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  password          String
  phone             String?
  address           String?
  first_name        String?
  last_name         String?
  User_id           BigInt             @unique
  role              String             @default("customer") // Kept for backward compatibility
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  orders            Order[]
  reviews           Review[]
  profile_photo     String?
  documents         Document[]
  account_number    String?            @unique
  bank_name         String?
  promotionUsages   PromotionUsage[]
  userActivities    UserActivity[]
  roles             UserRole[]
}

// Employee model
model Employee {
  id                Int       @id @default(autoincrement())
  first_name        String
  last_name         String
  email             String    @unique
  phone             String?
  address           String?
  position          String
  salary            Float?
  Employee_id       BigInt       @unique
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  profile_photo     String?
  documents         String?
  date_of_birth     DateTime?
  gender            String?
  orders            Order[]
  delivery          Delivery[]
}

// Remaining models stay the same...
// Table model
model Table {
  id               Int       @id @default(autoincrement())
  number           Int       @unique
  capacity         Int
  status           String    @default("available")
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  table_id         BigInt       @unique
  orders           Order[]
}

// Orders model
model Order {
  id               Int           @id @default(autoincrement())
  order_id         String        @unique
  create_at        DateTime      @default(now())
  status           String        @default("pending")
  total_price      Float
  User_id          Int?
  user             User?         @relation(fields: [User_id], references: [id])
  Employee_id      Int?
  employee         Employee?     @relation(fields: [Employee_id], references: [id])
  table_id         Int?
  table            Table?        @relation(fields: [table_id], references: [id])
  promotion_id     Int?
  promotion        Promotion?    @relation(fields: [promotion_id], references: [id])
  order_details    OrderDetail[]
  payments         Payment[]
  delivery         Delivery?
  discount_amount  Float?        @default(0)
  used_at          DateTime?
}

// OrderDetail model
model OrderDetail {
  id               Int       @id @default(autoincrement())
  order_id         Int
  order            Order     @relation(fields: [order_id], references: [id])
  food_menu_id     Int?
  food_menu        FoodMenu? @relation(fields: [food_menu_id], references: [id])
  beverage_menu_id Int?
  beverage_menu    BeverageMenu? @relation(fields: [beverage_menu_id], references: [id])
  quantity         Int
  price            Float
  notes            String?
  status_id        String?
}

// FoodMenu model
model FoodMenu {
  id               Int          @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  category_id      Int
  category         MenuCategory @relation(fields: [category_id], references: [id])
  image            String?
  status           String       @default("active")
  Created_at       DateTime     @default(now())
  items_id         Int?
  orderDetails     OrderDetail[]
}

// BeverageMenu model
model BeverageMenu {
  id               Int          @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  category_id      Int
  category         MenuCategory @relation(fields: [category_id], references: [id])
  image            String?
  status           String       @default("active")
  menu_id          Int?
  hot_price        Float?
  ice_price        Float?
  Created_at       DateTime     @default(now())
  orderDetails     OrderDetail[]
}

// MenuCategory model
model MenuCategory {
  id               Int            @id @default(autoincrement())
  name             String
  description      String?
  image            String?
  parent_id        Int?
  status           String         @default("active")
  category_id      BigInt            @unique
  type             String
  foodMenus        FoodMenu[]
  beverageMenus    BeverageMenu[]
}

// Payment model
model Payment {
  id               Int       @id @default(autoincrement())
  order_id         Int
  order            Order     @relation(fields: [order_id], references: [id])
  payment_id       BigInt       @unique
  amount           Float
  method           String
  payment_date     DateTime  @default(now())
  status           String    @default("pending")
  delivery_id      Int?
}

// Promotion model
model Promotion {
  id               Int       @id @default(autoincrement())
  name             String
  code             String    @unique
  discount_type    String
  discount_value   Float
  start_date       DateTime
  end_date         DateTime
  minimum_order    Float?
  maximum_discount Float?
  description      String?
  created_at       DateTime  @default(now())
  status           String    @default("active")
  promotion_id     BigInt       @unique
  usage_limit      Int?
  product_categories String?
  orders           Order[]
  promotionUsages  PromotionUsage[]
}

// PromotionUsage model
model PromotionUsage {
  id               Int       @id @default(autoincrement())
  promotion_id     Int
  promotion        Promotion @relation(fields: [promotion_id], references: [id])
  user_id          Int
  user             User      @relation(fields: [user_id], references: [id])
  used_at          DateTime  @default(now())
  created_at       DateTime  @default(now())
}

// Delivery model
model Delivery {
  id               Int       @id @default(autoincrement())
  order_id         Int       @unique
  order            Order     @relation(fields: [order_id], references: [id])
  status           String    @default("pending")
  delivery_id      BigInt       @unique
  delivery_address String?
  carrier_id       Int?
  employee_id      Int?
  employee         Employee?  @relation(fields: [employee_id], references: [id])
  delivered_time   DateTime?
  estimated_time   DateTime?
}

// Review model
model Review {
  id               Int       @id @default(autoincrement())
  user_id          Int
  user             User      @relation(fields: [user_id], references: [id])
  rating           Int
  comment          String?
  created_at       DateTime  @default(now())
  status           String    @default("pending")
}

// Document model
model Document {
  id               Int       @id @default(autoincrement())
  user_id          Int
  user             User      @relation(fields: [user_id], references: [id])
  document_type    String
  file_path        String
  uploaded_at      DateTime  @default(now())
}

// Blog model
model Blog {
  id               Int       @id @default(autoincrement())
  title            String
  content          String
  author           String?
  image            String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  status           String    @default("draft")
  categories       BlogCategory[]
  slug             String    @unique
  views            Int       @default(0)
}

// BlogCategory model
model BlogCategory {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  blogs            Blog[]
  slug             String    @unique
}

// Slideshow model
model Slideshow {
  id               Int       @id @default(autoincrement())
  title            String
  image            String
  link             String?
  order            Int       @default(0)
  status           String    @default("active")
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

// Gallery model
model Gallery {
  id               Int       @id @default(autoincrement())
  title            String?
  image            String
  category         String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

// SystemSettings model
model SystemSettings {
  id               Int       @id @default(autoincrement())
  key              String    @unique
  value            String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

// UserActivity model
model UserActivity {
  id               Int       @id @default(autoincrement())
  user_id          Int
  user             User      @relation(fields: [user_id], references: [id])
  activity_type    String
  description      String?
  ip_address       String?
  user_agent       String?
  created_at       DateTime  @default(now())
}