services:
  # Database Migration Service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'üîÑ Checking database migrations...' &&
        npx prisma migrate status &&
        if npx prisma migrate status | grep -q 'Database schema is up to date'; then
          echo '‚úÖ Database already up to date, skipping migrations'
        else
          echo 'üîÑ Running database migrations...' &&
          npx prisma migrate deploy &&
          echo '‚úÖ Migrations completed!'
        fi
      "
    restart: "no"
    networks:
      - app-network

  # Seed Service (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  seed:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV:-development}
      - SKIP_SEED=${SKIP_SEED:-false}
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: >
      sh -c "
        if [ \"$$NODE_ENV\" = \"development\" ] && [ \"$$SKIP_SEED\" != \"true\" ]; then
          echo 'üîç Checking if database needs seeding...' &&
          USER_COUNT=$$(npx prisma db execute --command=\"SELECT COUNT(*) FROM \\\"User\\\";\" 2>/dev/null | tail -1 | grep -o '[0-9]*' || echo '0') &&
          if [ \"$$USER_COUNT\" -eq 0 ]; then
            echo 'üå± Database is empty, seeding...' &&
            npm run seed &&
            echo '‚úÖ Seeding completed!'
          else
            echo '‚úÖ Database already has data ($$USER_COUNT users), skipping seed'
          fi
        else
          echo '‚è≠Ô∏è Skipping seed (production or SKIP_SEED=true)'
        fi
      "
    restart: "no"
    networks:
      - app-network
    profiles:
      - development

  # Main Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-7d}
      - JWT_EXPIRATION_SECONDS=${JWT_EXPIRATION_SECONDS:-604800}
      # üî• NEW: Cookie configuration
      - COOKIE_DOMAIN=
      - NEXT_PUBLIC_API_URL=http://localhost:3000/api
      # Cloudinary
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      # Email
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - APP_NAME=${APP_NAME:-SeeU Cafe}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3001}
      # Social Auth
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      # Push Notifications
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
      - VAPID_SUBJECT=${VAPID_SUBJECT}
      # Webhooks
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_PICKUP_WEBHOOK_URL=${N8N_PICKUP_WEBHOOK_URL}
      - N8N_RECEIPT_WEBHOOK_URL=${N8N_RECEIPT_WEBHOOK_URL}
      - N8N_TABLE_WEBHOOK_URL=${N8N_TABLE_WEBHOOK_URL}
      # Receipt Configuration
      - RECEIPT_LOGO_URL=${RECEIPT_LOGO_URL}
      - RECEIPT_FOOTER_TEXT=${RECEIPT_FOOTER_TEXT}
      - COMPANY_NAME=${COMPANY_NAME}
      - COMPANY_ADDRESS=${COMPANY_ADDRESS}
      - COMPANY_PHONE=${COMPANY_PHONE}
      - COMPANY_EMAIL=${COMPANY_EMAIL}
      - COMPANY_WEBSITE=${COMPANY_WEBSITE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      # üî• FIX: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà bind mount source code
      - type: bind
        source: .
        target: /app
        bind:
          create_host_path: true
      # üî• CRITICAL: Anonymous volume ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö node_modules ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å override
      - /app/node_modules
      # üî• FIX: Uploads volume - ‡πÉ‡∏ä‡πâ named volume ‡πÅ‡∏ó‡∏ô
      - uploads-data:/app/uploads
      # üî• FIX: Templates volume
      - ./templates:/app/templates:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-seeu_cafe}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      # üî• FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏° config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # üî• CRITICAL: ‡πÉ‡∏ä‡πâ named volume ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-seeu_cafe}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT_EXTERNAL:-6379}:6379"
    command: redis-server --appendonly yes --save 60 1000
    volumes:
      # üî• CRITICAL: ‡πÉ‡∏ä‡πâ named volume ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Redis
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # PGAdmin (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ development)
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # üî• NEW: ‡πÄ‡∏û‡∏¥‡πà‡∏° volume ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PGAdmin config
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - development

  # n8n Automation (optional)
  n8n:
    image: n8nio/n8n
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_AUTH_PASSWORD:-password123}
      - TZ=${TZ:-Asia/Bangkok}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
    volumes:
      # üî• CRITICAL: ‡πÉ‡∏ä‡πâ named volume ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• n8n
      - n8n-data:/home/node/.n8n
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - development

networks:
  app-network:
    driver: bridge

volumes:
  # üî• CRITICAL: ‡∏ó‡∏∏‡∏Å volumes ‡πÄ‡∏õ‡πá‡∏ô named volumes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
  postgres-data:
    driver: local
  redis-data:
    driver: local
  n8n-data:
    driver: local
  uploads-data:
    driver: local
  pgadmin-data:
    driver: local